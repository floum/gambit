import{move as e,end as n,cancel as o,start as r}from"./drag.js";import{move as t,end as s,cancel as d,start as a}from"./draw.js";import{drop as i}from"./drop.js";import{isRightButton as u}from"./util.js";import"./board.js";import"./premove.js";import"./anim.js";import"./types.js";function bindBoard(e,n){const o=e.dom.elements.board;"ResizeObserver"in window&&new ResizeObserver(n).observe(e.dom.elements.wrap);(e.disableContextMenu||e.drawable.enabled)&&o.addEventListener("contextmenu",(e=>e.preventDefault()));if(e.viewOnly)return;const r=startDragOrDraw(e);o.addEventListener("touchstart",r,{passive:false});o.addEventListener("mousedown",r,{passive:false})}function bindDocument(o,r){const d=[];"ResizeObserver"in window||d.push(unbindable(document.body,"chessground.resize",r));if(!o.viewOnly){const r=dragOrDraw(o,e,t);const a=dragOrDraw(o,n,s);for(const e of["touchmove","mousemove"])d.push(unbindable(document,e,r));for(const e of["touchend","mouseup"])d.push(unbindable(document,e,a));const onScroll=()=>o.dom.bounds.clear();d.push(unbindable(document,"scroll",onScroll,{capture:true,passive:true}));d.push(unbindable(window,"resize",onScroll,{passive:true}))}return()=>d.forEach((e=>e()))}function unbindable(e,n,o,r){e.addEventListener(n,o,r);return()=>e.removeEventListener(n,o,r)}const startDragOrDraw=e=>n=>{e.draggable.current?o(e):e.drawable.current?d(e):n.shiftKey||u(n)?e.drawable.enabled&&a(e,n):e.viewOnly||(e.dropmode.active?i(e,n):r(e,n))};const dragOrDraw=(e,n,o)=>r=>{e.drawable.current?e.drawable.enabled&&o(e,r):e.viewOnly||n(e,r)};export{bindBoard,bindDocument};
//# sourceMappingURL=events.js.map
