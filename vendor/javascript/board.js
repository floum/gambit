import{opposite as e,key2pos as o,pos2key as t,allPos as r,computeSquareCenter as n,distanceSq as s}from"./util.js";import{premove as c,queen as l,knight as i}from"./premove.js";import"./types.js";function callUserFunction(e,...o){e&&setTimeout((()=>e(...o)),1)}function toggleOrientation(o){o.orientation=e(o.orientation);o.animation.current=o.draggable.current=o.selected=void 0}function reset(e){e.lastMove=void 0;unselect(e);unsetPremove(e);unsetPredrop(e)}function setPieces(e,o){for(const[t,r]of o)r?e.pieces.set(t,r):e.pieces.delete(t)}function setCheck(e,o){e.check=void 0;o===true&&(o=e.turnColor);if(o)for(const[t,r]of e.pieces)r.role==="king"&&r.color===o&&(e.check=t)}function setPremove(e,o,t,r){unsetPredrop(e);e.premovable.current=[o,t];callUserFunction(e.premovable.events.set,o,t,r)}function unsetPremove(e){if(e.premovable.current){e.premovable.current=void 0;callUserFunction(e.premovable.events.unset)}}function setPredrop(e,o,t){unsetPremove(e);e.predroppable.current={role:o,key:t};callUserFunction(e.predroppable.events.set,o,t)}function unsetPredrop(e){const o=e.predroppable;if(o.current){o.current=void 0;callUserFunction(o.events.unset)}}function tryAutoCastle(e,r,n){if(!e.autoCastle)return false;const s=e.pieces.get(r);if(!s||s.role!=="king")return false;const c=o(r);const l=o(n);if(c[1]!==0&&c[1]!==7||c[1]!==l[1])return false;c[0]!==4||e.pieces.has(n)||(l[0]===6?n=t([7,l[1]]):l[0]===2&&(n=t([0,l[1]])));const i=e.pieces.get(n);if(!i||i.color!==s.color||i.role!=="rook")return false;e.pieces.delete(r);e.pieces.delete(n);if(c[0]<l[0]){e.pieces.set(t([6,l[1]]),s);e.pieces.set(t([5,l[1]]),i)}else{e.pieces.set(t([2,l[1]]),s);e.pieces.set(t([3,l[1]]),i)}return true}function baseMove(e,o,t){const r=e.pieces.get(o),n=e.pieces.get(t);if(o===t||!r)return false;const s=n&&n.color!==r.color?n:void 0;t===e.selected&&unselect(e);callUserFunction(e.events.move,o,t,s);if(!tryAutoCastle(e,o,t)){e.pieces.set(t,r);e.pieces.delete(o)}e.lastMove=[o,t];e.check=void 0;callUserFunction(e.events.change);return s||true}function baseNewPiece(o,t,r,n){if(o.pieces.has(r)){if(!n)return false;o.pieces.delete(r)}callUserFunction(o.events.dropNewPiece,t,r);o.pieces.set(r,t);o.lastMove=[r];o.check=void 0;callUserFunction(o.events.change);o.movable.dests=void 0;o.turnColor=e(o.turnColor);return true}function baseUserMove(o,t,r){const n=baseMove(o,t,r);if(n){o.movable.dests=void 0;o.turnColor=e(o.turnColor);o.animation.current=void 0}return n}function userMove(e,o,t){if(canMove(e,o,t)){const r=baseUserMove(e,o,t);if(r){const n=e.hold.stop();unselect(e);const s={premove:false,ctrlKey:e.stats.ctrlKey,holdTime:n};r!==true&&(s.captured=r);callUserFunction(e.movable.events.after,o,t,s);return true}}else if(canPremove(e,o,t)){setPremove(e,o,t,{ctrlKey:e.stats.ctrlKey});unselect(e);return true}unselect(e);return false}function dropNewPiece(e,o,t,r){const n=e.pieces.get(o);if(n&&(canDrop(e,o,t)||r)){e.pieces.delete(o);baseNewPiece(e,n,t,r);callUserFunction(e.movable.events.afterNewPiece,n.role,t,{premove:false,predrop:false})}else if(n&&canPredrop(e,o,t))setPredrop(e,n.role,t);else{unsetPremove(e);unsetPredrop(e)}e.pieces.delete(o);unselect(e)}function selectSquare(e,o,t){callUserFunction(e.events.select,o);if(e.selected){if(e.selected===o&&!e.draggable.enabled){unselect(e);e.hold.cancel();return}if((e.selectable.enabled||t)&&e.selected!==o&&userMove(e,e.selected,o)){e.stats.dragged=false;return}}if((e.selectable.enabled||e.draggable.enabled)&&(isMovable(e,o)||isPremovable(e,o))){setSelected(e,o);e.hold.start()}}function setSelected(e,o){e.selected=o;isPremovable(e,o)?e.premovable.customDests||(e.premovable.dests=c(e.pieces,o,e.premovable.castle)):e.premovable.dests=void 0}function unselect(e){e.selected=void 0;e.premovable.dests=void 0;e.hold.cancel()}function isMovable(e,o){const t=e.pieces.get(o);return!!t&&(e.movable.color==="both"||e.movable.color===t.color&&e.turnColor===t.color)}const canMove=(e,o,t)=>{var r,n;return o!==t&&isMovable(e,o)&&(e.movable.free||!!((n=(r=e.movable.dests)===null||r===void 0?void 0:r.get(o))===null||n===void 0?void 0:n.includes(t)))};function canDrop(e,o,t){const r=e.pieces.get(o);return!!r&&(o===t||!e.pieces.has(t))&&(e.movable.color==="both"||e.movable.color===r.color&&e.turnColor===r.color)}function isPremovable(e,o){const t=e.pieces.get(o);return!!t&&e.premovable.enabled&&e.movable.color===t.color&&e.turnColor!==t.color}function canPremove(e,o,t){var r,n;const s=(n=(r=e.premovable.customDests)===null||r===void 0?void 0:r.get(o))!==null&&n!==void 0?n:c(e.pieces,o,e.premovable.castle);return o!==t&&isPremovable(e,o)&&s.includes(t)}function canPredrop(e,o,t){const r=e.pieces.get(o);const n=e.pieces.get(t);return!!r&&(!n||n.color!==e.movable.color)&&e.predroppable.enabled&&(r.role!=="pawn"||t[1]!=="1"&&t[1]!=="8")&&e.movable.color===r.color&&e.turnColor!==r.color}function isDraggable(e,o){const t=e.pieces.get(o);return!!t&&e.draggable.enabled&&(e.movable.color==="both"||e.movable.color===t.color&&(e.turnColor===t.color||e.premovable.enabled))}function playPremove(e){const o=e.premovable.current;if(!o)return false;const t=o[0],r=o[1];let n=false;if(canMove(e,t,r)){const o=baseUserMove(e,t,r);if(o){const s={premove:true};o!==true&&(s.captured=o);callUserFunction(e.movable.events.after,t,r,s);n=true}}unsetPremove(e);return n}function playPredrop(e,o){const t=e.predroppable.current;let r=false;if(!t)return false;if(o(t)){const o={role:t.role,color:e.movable.color};if(baseNewPiece(e,o,t.key)){callUserFunction(e.movable.events.afterNewPiece,t.role,t.key,{premove:false,predrop:true});r=true}}unsetPredrop(e);return r}function cancelMove(e){unsetPremove(e);unsetPredrop(e);unselect(e)}function stop(e){e.movable.color=e.movable.dests=e.animation.current=void 0;cancelMove(e)}function getKeyAtDomPos(e,o,r){let n=Math.floor(8*(e[0]-r.left)/r.width);o||(n=7-n);let s=7-Math.floor(8*(e[1]-r.top)/r.height);o||(s=7-s);return n>=0&&n<8&&s>=0&&s<8?t([n,s]):void 0}function getSnappedKeyAtDomPos(e,c,a,u){const v=o(e);const p=r.filter((e=>l(v[0],v[1],e[0],e[1])||i(v[0],v[1],e[0],e[1])));const d=p.map((e=>n(t(e),a,u)));const f=d.map((e=>s(c,e)));const[,b]=f.reduce(((e,o,t)=>e[0]<o?e:[o,t]),[f[0],0]);return t(p[b])}const whitePov=e=>e.orientation==="white";export{baseMove,baseNewPiece,callUserFunction,canMove,cancelMove,dropNewPiece,getKeyAtDomPos,getSnappedKeyAtDomPos,isDraggable,playPredrop,playPremove,reset,selectSquare,setCheck,setPieces,setSelected,stop,toggleOrientation,unselect,unsetPredrop,unsetPremove,userMove,whitePov};
//# sourceMappingURL=board.js.map
